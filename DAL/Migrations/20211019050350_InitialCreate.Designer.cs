// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(ProyectoContext))]
    [Migration("20211019050350_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entity.Cita", b =>
                {
                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdDoctor")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdPaciente")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Codigo");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("IdPaciente");

                    b.ToTable("Citas");
                });

            modelBuilder.Entity("Entity.DetalleProducto", b =>
                {
                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdProducto")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InformeCodigo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Codigo");

                    b.HasIndex("IdProducto");

                    b.HasIndex("InformeCodigo");

                    b.ToTable("DetalleProducto");
                });

            modelBuilder.Entity("Entity.Especialidad", b =>
                {
                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Codigo");

                    b.ToTable("Especialidades");
                });

            modelBuilder.Entity("Entity.Historia", b =>
                {
                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Codigo");

                    b.ToTable("Historia");
                });

            modelBuilder.Entity("Entity.Informe", b =>
                {
                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Diagnostico")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HistoriaCodigo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdDoctor")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Codigo");

                    b.HasIndex("HistoriaCodigo");

                    b.HasIndex("IdDoctor");

                    b.ToTable("Informe");
                });

            modelBuilder.Entity("Entity.Persona", b =>
                {
                    b.Property<string>("Identificacion")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Edad")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("PrimerApellido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimerNombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SegundoApellido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SegundoNombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Identificacion");

                    b.ToTable("Persona");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Persona");
                });

            modelBuilder.Entity("Entity.Producto", b =>
                {
                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Codigo");

                    b.ToTable("Producto");
                });

            modelBuilder.Entity("Entity.Doctor", b =>
                {
                    b.HasBaseType("Entity.Persona");

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdEspecialidad")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("IdEspecialidad");

                    b.ToTable("Persona");

                    b.HasDiscriminator().HasValue("Doctor");
                });

            modelBuilder.Entity("Entity.Paciente", b =>
                {
                    b.HasBaseType("Entity.Persona");

                    b.Property<string>("DepartamentoResidencia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HistoriaCodigo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Ocupacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoAseguradora")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("HistoriaCodigo");

                    b.ToTable("Persona");

                    b.HasDiscriminator().HasValue("Paciente");
                });

            modelBuilder.Entity("Entity.Cita", b =>
                {
                    b.HasOne("Entity.Doctor", null)
                        .WithMany()
                        .HasForeignKey("IdDoctor");

                    b.HasOne("Entity.Doctor", null)
                        .WithMany()
                        .HasForeignKey("IdPaciente");
                });

            modelBuilder.Entity("Entity.DetalleProducto", b =>
                {
                    b.HasOne("Entity.Producto", null)
                        .WithMany()
                        .HasForeignKey("IdProducto");

                    b.HasOne("Entity.Informe", null)
                        .WithMany("Detalles")
                        .HasForeignKey("InformeCodigo");
                });

            modelBuilder.Entity("Entity.Informe", b =>
                {
                    b.HasOne("Entity.Historia", null)
                        .WithMany("Informes")
                        .HasForeignKey("HistoriaCodigo");

                    b.HasOne("Entity.Doctor", null)
                        .WithMany()
                        .HasForeignKey("IdDoctor");
                });

            modelBuilder.Entity("Entity.Doctor", b =>
                {
                    b.HasOne("Entity.Especialidad", null)
                        .WithMany()
                        .HasForeignKey("IdEspecialidad");
                });

            modelBuilder.Entity("Entity.Paciente", b =>
                {
                    b.HasOne("Entity.Historia", "Historia")
                        .WithMany()
                        .HasForeignKey("HistoriaCodigo");

                    b.Navigation("Historia");
                });

            modelBuilder.Entity("Entity.Historia", b =>
                {
                    b.Navigation("Informes");
                });

            modelBuilder.Entity("Entity.Informe", b =>
                {
                    b.Navigation("Detalles");
                });
#pragma warning restore 612, 618
        }
    }
}
